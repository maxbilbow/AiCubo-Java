package rmx;

import java.util.Iterator;
import java.util.LinkedList;


public class Bugger {
	public static final boolean logging = true;
	public static final boolean debug = true;
	
	private LinkedList<String> logs = new LinkedList<String>();

	private static Bugger singleton;
	private Bugger(){ 
		Runtime.getRuntime().addShutdownHook(new Thread() {
		    public void run() {
		        if (singleton != null)
		        	singleton.printAll();
		    }
		});
	}
	
	public static Bugger getInstance() {
		if (singleton != null)
			return singleton;
		else {
			singleton = new Bugger();
		}
		return singleton;
	}
	
	public static void logAndPrint(Object o, boolean keep) {
		if (logging) {
			Bugger b = getInstance();
			if (!b.logs.isEmpty()) {
//				String prev = b.logs.getLast();
//				String newLog = String.valueOf(o);
//				if (prev.endsWith(newLog)) {
//					newLog = "x" + ++b.count + (b.logs.removeLast().substring(16));
//					++b.count;
//				} else {
//					b.count = 1;
//				}
//				b.newLog();
				b.logMessage(o);
				b.print(keep);
			}	
		}
	}
	
//	private void newLog() {
////		this.logs.addLast("");
//	}
	
	public static void log(Object o) {
		if (logging) 
			getInstance().logMessage(o);
	}
	int count = 1;
//	private String previousLog = "";
	private String logMessage(Object o) {
		String log = this.logs.isEmpty() ? "" : this.logs.removeLast();
		String prev = this.logs.isEmpty()? "" : this.logs.getLast();
		
		StackTraceElement trace = Thread.currentThread().getStackTrace()[3];
		String theClass = trace.getClassName();
		String method = trace.getMethodName();
		int line = trace.getLineNumber();
		String time = java.time.LocalTime.now().toString();
		
		String newLog = theClass + "::" + method + " on line " + line + ": " + String.valueOf(o);
		String timestamp = "[" + time + "x" + count + "] ";
		
		int strlen = (timestamp + newLog).length();
		if (!log.isEmpty() && log.endsWith(newLog)){
			log = log.substring(0, log.length()-strlen);
			++count;
		} else if (log.isEmpty() && !prev.isEmpty() && prev.endsWith(newLog) ){
			log = this.logs.removeLast();
			log = log.substring(0, log.length()-strlen);
			++count;
		} else {
			count = 1;
			if (!log.isEmpty()) 
				log += "\n";
			
		}
		newLog =  "[" + time + "x" + count + "] " + newLog;
		log += newLog;
		this.logs.addLast(log);	
	}
	
//	public static void Print(boolean keep) {
//		getInstance().print(keep);
//	}
//	
	private void print(boolean keep) {
		if (logging) {
			String log = this.logs.getLast();
			//TODO print to file
			if (debug)
				System.out.println(log);
			if (keep && !this.logs.isEmpty())
				this.logs.addLast("");
			else
				this.logs.removeLast();
		} 
		
		
	}
	public void printAll() {
		System.out.println("====== BEGIN LOG ======");
		Iterator<String> i = getInstance().logs.iterator();
		String systemLog = "";
		while (i.hasNext()) { 
			systemLog +=  i.next() + "\n";
		}
		systemLog += "====== END OF LOG ======"; //= systemLog.substring(0, systemLog.length()) +
		if (debug)
			System.out.println(systemLog);
		if (logging) {
			//TODO Print to file
		}
	}
	
	
	
	public static void main (String[] args) {
//		Bugger b = Bugger.getInstance();
		log("Hello!");
//		Print(true);
		
		log("Hello again!");
		logAndPrint("My Friends!", true);
	
	}
}
