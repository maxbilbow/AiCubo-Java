package rmx.engine;


import java.util.ArrayList;

import rmx.Bugger;
import rmx.RMXObject;

import java.util.HashMap;

@StructClass
public class Node extends RMXObject {

	private HashMap<Class<?>,NodeComponent> components = new HashMap<Class<?>,NodeComponent>();
	private ArrayList<Behaviour> behaviours = new ArrayList<Behaviour>();
	
	public void setComponent(Class<?> type, NodeComponent component) {
		this.components.put(type, component);
		component.setNode(this);
	}
	
	public void addBehaviour(Behaviour behaviour) {
		this.behaviours.add(behaviour);
		behaviour.setNode(this);
	}
	
	public NodeComponent getComponent(Class<?> type) {
		return components.getOrDefault(type,null);
	}
	
	public final Transform transform;

	private ArrayList<Node> children = new ArrayList<Node>();
	public ArrayList<Node> getChildren() {
		return this.children;
	}
	
	public void addChild(Node child) {
		this.children.add(child);
	}
	
	public Node getChildWithName(String name) {
		for (Node child : this.children) {
			if (child.getName() == name)
				return child;
		}
		return null;
	}
	
	public Node(){
		this.transform = new Transform(this);
	}
	

	public Camera camera() {
		return (Camera) this.getComponent(Camera.class);
	}

	public void setCamera(Camera camera) {
		this.setComponent(Camera.class, camera);
	}
	
	public static Node newCameraNode() {
		Node cameraNode = new Node();
		cameraNode.setCamera(new Camera());
		return cameraNode;
	}
	
	

	public Geometry geometry() {
		return (Geometry) this.getComponent(Geometry.class);
	}

	public void setGeometry(Geometry geometry) {
		this.setComponent(Geometry.class, geometry);
	}
	
	public PhysicsBody physicsBody(){
		return (PhysicsBody) this.getComponent(PhysicsBody.class);
	}
	
	public void setPhysicsBody(PhysicsBody body) {
		this.setComponent(PhysicsBody.class, body);
	}
	
	public void updateLogic() {
		for (Behaviour behaviour : this.behaviours) {
			if (behaviour.isEnabled())
				behaviour.update();
		}
		for (Node child : this.children)
			child.updateLogic();
		for (Behaviour behaviour : this.behaviours) {
			if (behaviour.isEnabled())
				behaviour.lateUpdate();
		}
	}
	
	public void draw() {
		if (this.geometry() != null) {
			this.geometry().render();
		}
		for (Node child : this.children)
			child.draw();
	}
	
	
	
	public static void main(String[] args) {
		RMXObject o = new RMXObject();
		o.setName("Parent");
		Node o2 = Node.newCameraNode();
		
		o.sendMessage("getCamera",null);
		o2.sendMessage("getCamera",null);
		o.sendMessage("getCamera","Balls");
		o2.sendMessage("getCamera","Balls");
		
		if (o2.geometry() == null)
			Bugger.log("That's OK then");
		if (o2.camera() != null)
			Bugger.log("That's OK then");
		
//		o2.addBehaviour(new ABehaviour());
		
		o2.updateLogic();
	}
}
