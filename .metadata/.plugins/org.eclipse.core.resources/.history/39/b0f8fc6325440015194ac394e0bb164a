package rmx.engine.math;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;

import javax.vecmath.Matrix4f;
import javax.vecmath.Vector3f;
import javax.vecmath.Vector4f;

import org.lwjgl.BufferUtils;

public class Matrix4 extends Matrix4f{
	static int SIZE = 16;
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private float[] m = new float[SIZE];

	/**
	 * 
	 * @return float[] representation of matrix. 
	 */
	public float[] elements() {
		m[0]  = m00; m[1]  = m01; m[2]  = m02; m[3]  = m03;
		m[4]  = m10; m[5]  = m11; m[6]  = m12; m[7]  = m13;
		m[8]  = m20; m[9]  = m21; m[10] = m22; m[11] = m23;
		m[12] = m30; m[13] = m31; m[14] = m32; m[15] = m33;
		return m;
	}
	
//	public ByteBuffer byteBuffer() {
//		ByteBuffer buffer = ByteBuffer.allocateDirect(16).order(ByteOrder.nativeOrder());
//		byte[] bytes = new byte[SIZE];
//		float[] m = elements();
//		for (int i = 0; i<SIZE; ++i)
//			bytes[i] = (byte) m[i];
//		buffer.put(bytes);
//		return buffer;
//	}
	
	private FloatBuffer _buffer = BufferUtils.createFloatBuffer(SIZE);
	private boolean _bufferReady = false;
	
	public void resetBuffers() {
		_bufferReady = false;
	}
	
	/**
	 * 
	 * @return saved floatbuffer or new float buffer is resetBuffers() was called;
	 */
	public FloatBuffer buffer() {
		if (_bufferReady)
			return _buffer;
		else 
			return updateBuffer();
	}
	
	private FloatBuffer updateBuffer() {
		_buffer.clear();
		
		_buffer.put(m00);
		_buffer.put(m01);
		_buffer.put(m02);
		_buffer.put(m03);

		_buffer.put(m10);
		_buffer.put(m11);
		_buffer.put(m12);
		_buffer.put(m13);

		_buffer.put(m20);
		_buffer.put(m21);
		_buffer.put(m22);
		_buffer.put(m23);
	
		_buffer.put(m30);
		_buffer.put(m31);
		_buffer.put(m32);
		_buffer.put(m33);
		
		_buffer.flip();
		 
		_bufferReady = true;
		return _buffer;
	}

	private static void mul(Matrix4 projectionMatrix, Matrix4 modelviewMatrix, FloatBuffer mvpMatrix) {
		// TODO Auto-generated method stub
		
	}

	public void translate(Vector3f v) {
		m30 += v.x;
		m31 += v.y;
		m32 += v.z;
//		m33 += v.x;	
	}
	
	public void translate(Vector4f v) {
		m30 += v.x;
		m31 += v.y;
		m32 += v.z;
		m34 += v.w;
		
		
	}
	private Vector3 _left = new Vector3();
	private Vector3 _up = new Vector3();
	private Vector3 _fwd = new Vector3();
	private Vector3 _pos = new Vector3();
	
	public Vector3 left() {
		_left.x = this.m00;
		_left.y = this.m01;
		_left.z = this.m01;
		return _left;
	}
	
	public Vector3 up() {
		_up.x = this.m10;
		_up.y = this.m11;
		_up.z = this.m11;
		return _up;
	}
	
	public Vector3 forward() {
		_fwd.x = this.m20;
		_fwd.y = this.m21;
		_fwd.z = this.m21;
		return _fwd;
	}
	
	public Vector3 position() {
		_pos.x = this.m30;
		_pos.y = this.m31;
		_pos.z = this.m31;
		return _pos;
	}
	
}
