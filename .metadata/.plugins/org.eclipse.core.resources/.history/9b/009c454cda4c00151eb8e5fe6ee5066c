package click.rmx.engine.behaviours;

import click.rmx.engine.Node;
import click.rmx.engine.NodeComponent;
import click.rmx.engine.math.Vector3;

public abstract class Behaviour extends NodeComponent implements IBehaviour {
	public static final String 
	AI_STATE_NULL = "AI_STATE_NULL",
	AI_STATE_POSSESSED = "AI_STATE_POSSESSED";
//	void setNode(Node node);
	
//	public Node getNode();
	public final static String 
	KEY_AI_STATE = "KEY_AI_STATE",
	KEY_IS_STUCK = "KEY_IS_STUCK";
	
	public static final int
	STUCK_TRUE = 1, STUCK_FALSE = 0, STUCK_MAYBE = 2;
	public void setState(String state) {
		this.setValue(KEY_AI_STATE, state);		
	}

	protected void setStuck(int state) {
		this.setValue(KEY_IS_STUCK, state);
		
	}

	public String state() {
		Object i = this.getNode().getValue(KEY_AI_STATE);
		return i == null ? AI_STATE_NULL : String.valueOf(i);
	}
	

	public void setDefaultState() {
		this.setState(AI_STATE_NULL);
	}
	
	protected abstract void onAwake();
	
	public int stuckState() {
		Object result = this.getValue(KEY_IS_STUCK);
		return result != null ? (int) result : 0;
	}
	
	public boolean isStuck() {
		int state = stuckState();
		if (state == STUCK_MAYBE) {
			Vector3[] history = transform().rootTransform().getHistory();
			Vector3 pos = this.transform().position();
			float dx = pos.x, dy = pos.y, dz = pos.z;
			for (Vector3 v : history) {
				dx += v.x;
				dy += v.y;
				dz += v.z;
			}
			dx = Math.abs(dx); dy = Math.abs(dy); dz = Math.abs(dz);
			this.setValue(KEY_IS_STUCK, dx + dy + dz < 1);
			System.out.println(dx + dy + dz <1);
		} else {
			return state == STUCK_TRUE ? true : false;
		}
	}
	
	/**
	 * Overriden so that multiple behaviours can share the same variables
	 */
	public Object getValue(String forKey) {
		return this.getNode().getValue(forKey);
	}
	
	/**
	 * Overriden so that multiple behaviours can share the same variables
	 */
	public Object setValue(String forKey, Object value) {
		return this.getNode().setValue(forKey, value);
	}
	
//	public abstract void update(long tick);
	
	public void lateUpdate() {
		
	};
	
	public void setNode(Node node) {
		super.setNode(node);
		this.onAwake();
	}

	public void turnToFace(Vector3 position) {
		// TODO Auto-generated method stub
	}
//	public boolean isEnabled();
}

