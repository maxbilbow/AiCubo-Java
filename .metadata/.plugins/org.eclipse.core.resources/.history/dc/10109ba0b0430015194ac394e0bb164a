package rmx.engine;

import javax.vecmath.AxisAngle4f;
import javax.vecmath.Matrix3f;
import javax.vecmath.Matrix4f;
import javax.vecmath.Quat4f;
import javax.vecmath.Vector3f;

import rmx.Bugger;
import rmx.db.RMX;



public class Transform extends NodeComponent {
	
	public final Node node;
	
	private Matrix3f _rMatrix = new Matrix3f();
	private Matrix4f _worldMatrix = new Matrix4f();
	private Quat4f   _quaternion = new Quat4f();
	private Vector3f _eulerAngles = new Vector3f();
	public Transform(Node node) {
		this.node = node;
		this.localMatrix = new Matrix4f();
		this.localMatrix.setIdentity();
		
		this.axis = new Matrix4f();
		this.axis.setIdentity();
	}
	
	private Matrix4f axis;
	Matrix4f localMatrix;
	
	/**
	 * TODO probably doesnt work. How do you do this maths?
	 * @return
	 */
	public Matrix4f worldMatrix() {
		Transform parent = this.parent();
		if (parent != null) {
			_worldMatrix.set(this.localMatrix);//.clone();
			_worldMatrix.mul(this.parent().worldMatrix());
			return _worldMatrix;
		} else {
			return this.localMatrix;
		}
	}
	
	public Transform parent() {
		Node parentNode = this.node.getParent();
		return parentNode != null ? this.node.getParent().transform : null;
	}
	public Vector3f localPosition() {
		return new Vector3f(
				this.localMatrix.m30,
				this.localMatrix.m31,
				this.localMatrix.m32
				);
	}
	
	public Vector3f position() {
		Transform parent = this.parent();
		if (parent != null) {
			Vector3f result = (Vector3f) this.localPosition().clone();
			result.add(parent.position());
			return result;
		}
		return this.localPosition();
	}
	
	public void setPosition(Vector3f position) {
		this.localMatrix.m30 = position.x;
		this.localMatrix.m31 = position.y;
		this.localMatrix.m32 = position.z;
	}
	
	public void setPosition(float x, float y, float z) {
		this.localMatrix.m30 = x;
		this.localMatrix.m31 = y;
		this.localMatrix.m32 = z;
	}
	
	public Vector3f left() {
		return new Vector3f(
				this.localMatrix.m00,
				this.localMatrix.m01,
				this.localMatrix.m02
				);
	}
	
	public Vector3f up() {
		return new Vector3f(
				this.localMatrix.m10,
				this.localMatrix.m11,
				this.localMatrix.m12
				);
	}
	
	public Vector3f forward() {
		return new Vector3f(
				this.localMatrix.m20,
				this.localMatrix.m21,
				this.localMatrix.m22
				);
	}
	
	public void move(String args) {
		String[] options = args.split(":");
		String direction = options[0];
		float speed = (float) (Float.parseFloat(options[1]) * 0.1);
		switch (direction) {
		case "forward":
			this.localMatrix.m32 += speed;
			break;
		case "left":
			this.localMatrix.m30 += speed;
			break;
		case "up":
			this.localMatrix.m31 += speed;
			break;
		case "pitch":
			this.rotateAround(this.left(), speed);
			break;
		case "yaw":
			this.rotateAround(this.up(), speed);
			break;
		case "roll":
			this.rotateAround(this.forward(), speed);
			break;
		}
//		Transform child = node.getChildren().get(0).transform;
//		Bugger.logAndPrint("\nParent: \n" + this.worldMatrix() + 
//				"\nChild: \n" + child.worldMatrix(), false);
		Bugger.logAndPrint("\n"+ this.worldMatrix(), false);
	}
	
	public Quat4f quaternion() {
		_quaternion.set(this.worldMatrix());
		return _quaternion;
	}
	
	public Quat4f localRotation() {
		Quat4f q = new Quat4f();
		q.set(this.localMatrix);
		return q;
	}
	
	public Vector3f eulerAngles() {
//		_rotation.set(this.worldMatrix());
		return localEulerAngles();
	}
	
	
	public Vector3f localEulerAngles() {
		Matrix4f m = this.worldMatrix();
		_eulerAngles.x = (float) Math.atan2( m.m22, m.m23);
		_eulerAngles.y = (float) Math.atan2(-m.m21, Math.sqrt(m.m22 * m.m22 + m.m23 * m.m23));
		_eulerAngles.z = (float) Math.atan2( m.m11, m.m01);
		return _eulerAngles;
	}
	
	
	public void rotateAround(Vector3f v, float degrees) {
		_rMatrix.setIdentity();
		_rMatrix.setRotation(new AxisAngle4f(v.x,v.y,v.z,degrees*  RMX.PI_OVER_180));
		_rMatrix.transpose();
		
//		_quaternion.set(new AxisAngle4f(v.x,v.y,v.z,degrees * 0.1f));
		this.localMatrix.mul(_rMatrix);
		
	}
	
//	public void moveForward(String speed) {
//		this.localMatrix.m32 += 1;
//		Bugger.logAndPrint(this.localMatrix.m32, false);
//	}

}
