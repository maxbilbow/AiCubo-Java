/**
 * 
 */
package rmx.engine;

import rmx.RMXObject;

class Singletons {


//	static bool _gameControllerInitialized = false;
//	public static boolean GameControllerInitialized() {
//			return _gameController != null;//_gameControllerInitialized;
//	}
	

//	static IGameController _gameController;
// 	public static IGameController GameController {
//		get{ 
//			return _gameController;
//		}
//	}

/**
 * @author Max
 *
 */
		public abstract static class ASingleton<T extends RMXObject> 
		extends RMXObject implements ISingleton
//		where T : RMXObject, EventListener, ISingleton 
		{

			private final static Class<?> singleton;

			protected boolean SetupComplete() {
				return true;
			}

			public static final boolean IsInitialized;
//			{
//				return _isInitialized && (_singleton as ASingleton<T>).SetupComplete();
//			}



		
  	
			/// <summary>
			/// Gets the current singleton as a protected static variable that may be delegated in a subclass.
			/// _current initializes the singlton if not already initialized 
			/// so this should not be called before Start(), especially if the script is attached to a GameObject in the editor.
			/// </summary>
			/// <value>The current GameControllerExample singleton.</value>
			public static Class<?> current() {
					if (IsInitialized) {
						return singleton;
					} else {
//						if (Class<?> == IGameController)
//							throw new System.Exception(typeof(T).Name + "Should never be initialized with static Getter method 'current'");
//						if (typeof(T) is IDebugHUD)
//							throw new System.Exception("DebugHUD should not be accessed through 'ASingleton.current' as a Singleton");
						return Initialize();
					}
			}


			final String tempName = "324329hrNhfeuwh9";
			private boolean _destroyed = false;
			public boolean isDestroyed() {
				return _destroyed;
			}




			public static Class<?> Initialize() {
//				if (typeof(T) is IGameController)
//					throw new System.Exception(typeof(T).Name + "Should never be initialized with static Getter method 'current'");
				if (IsInitialized) 
					return singleton;
				else {
//					var go = new GameObject(tempName);
//					ISingleton aSingleton = go.AddComponent<T> ();
//					if (aSingleton == null || (aSingleton as ISingleton).Destroyed) {
//						return null;
//					}
//					aSingleton.gameObject.name = aSingleton.GetType ().Name;
//	
//					if (!(aSingleton is IGameController) && Singletons.GameControllerInitialized) {
//						var parent = Singletons.GameController.gameObject;
//						aSingleton.gameObject.transform.SetParent (parent.transform);
//					}
					
					return new Class<?>();
				} 
			}

		

			private void MainInitCheck() {
				if (this.getClass() == IGameController.class) {
					Singletons._gameController = this as IGameController;
					_gameController.Patch();
				}
			 	else if (_gameController == null)
					Debug.LogWarning ("GameController should be initialized before " + this.GetType().Name);
			}

			protected enum Init {
				Continue, DestroyScript, DestroyCompletely
			}

			protected virtual Init WillInitialize {
				get {
					return Init.Continue;
				}
			}
			/// <summary>
			/// Checks whether a singleton already exists. If so, object is destroyed.
			/// Otherwise it checks whether the EventListener methods have been overriden. If so, the object is added to the global EventListeners.
			/// </summary>
			protected override void Awake() {
				var message = "__new__ <color=lightblue>" + this.GetType().Name + "</color>()";
				switch (WillInitialize) {
				case Init.DestroyCompletely:
					Destroy (this);
					Destroy (gameObject);
					_destroyed = true;
					return;
				case Init.DestroyScript:
					Destroy (this);
					_destroyed = true;
					return;
				case Init.Continue:
					if (_singleton == null) {
						DontDestroyOnLoad (gameObject);
						_singleton = this as T;// as T;
						MainInitCheck ();
						_isInitialized = true;
						base.Awake ();
					} else if (_singleton != this) {
						if (gameObject.name == tempName) {// gameObject.name == this.GetType().Name &&
							message += " -- <color=red> DELETING REDUNDANT " + this.GetType ().Name + "</color>()";
							_destroyed = true;
							Destroy (gameObject);
							Destroy (this);
						} else {
							message += " -- <color=orange> DELETING REDUNDANT ASingleton: </color> " + this.GetType ().Name + "</color>()";
							_destroyed = true;
							Destroy (this);
						}
					}

					break;
				}
				if (Bugger.WillLog (RMXTests.Singletons, message))
					Debug.Log (Bugger.Last);

			}

		}
	}
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
