package click.rmx;

import java.lang.management.GarbageCollectorMXBean;
import java.lang.management.ManagementFactory;
import java.util.HashMap;
import java.util.List;

import click.rmx.engine.math.Matrix4;

public final class RMX {
	public static final float PI_OVER_180 = (float) (Math.PI / 180);

	/**
	 * Events
	 */
	public static final String
		END_OF_GAMELOOP = "END_OF_GAMELOOP";
	
	public static final Matrix4 Matrix4Identity = new Matrix4();
	
	static {
		Matrix4Identity.setIdentity();
	}

	public static float rmxGetCurrentFramerate() {
		return 0.0167f;
	}

	public static String rmxGarbageCollectorInfo() {
		List<GarbageCollectorMXBean> list = ManagementFactory.getGarbageCollectorMXBeans();
		String s = "Beans:";
		for (GarbageCollectorMXBean bean : list) {
			if (!bean.isValid()) 
				continue;
			s += "\n" + bean.getName();
			s += "\n  - Count: " + bean.getCollectionCount();
			s += "\n  -  Time: " + bean.getCollectionTime();
		}
		return s;
	}
	
	public static String rmxGetPackageUrl(Class<?> aClass) {
		return aClass.getPackage().getName().replace('.', '/');
	}
	
	public static String rmxGetPackageUrl(Object object) {
		return rmxGetPackageUrl(object.getClass());
	}

	public static void rmxTodo() {
		Tests.note(null,1);
	}
	
	private static HashMap<Class<?>,Integer> liveObjects = new HashMap<>();
	
	public static synchronized void rmxIncrementObjectCount(Object object) {
		int count = liveObjects.getOrDefault(object.getClass(),0);
		liveObjects.put(object.getClass(), count + 1);
	}
	
	public static synchronized void rmxDecrimentObjectCount(Object object) {
		int count = liveObjects.getOrDefault(object.getClass(),0);
		liveObjects.put(object.getClass(), count - 1);
		if (count == 0)
			throw new IllegalArgumentException(object.getClass().getSimpleName() + " count should not be " + count);
	}
	
	public static int rmxObjectCount(Class<?> aClass) {
		return liveObjects.get(aClass);
	}
}
