package click.rmx.engine;

import static org.lwjgl.opengl.GL11.*;


import java.nio.ByteBuffer;
import org.lwjgl.BufferUtils;
import org.lwjgl.opengl.GL11;

import click.rmx.RMXObject;
import click.rmx.engine.geometry.Shape;
import click.rmx.engine.geometry.Shapes;
import click.rmx.engine.gl.Mesh;
import click.rmx.engine.math.Matrix4;
import click.rmx.engine.math.Vector3;
import click.rmx.engine.math.Vector4;


public abstract class OldGeometry extends ANodeComponent implements Geometry {

	private Shape shape;
		
	public OldGeometry(Shape shape) {
		this.shape = shape;
	}
	public OldGeometry() {
		this.shape = Shapes.Cube;
	}

	public boolean isVisible() {
		return true;
	}
	private Matrix4 _modelView = new Matrix4();


	
	public void render(Node node) {//, Object modelMatrix) {

	
		_modelView.set(node.transform().worldMatrix());

		Vector3 modelA = node.transform().eulerAngles();
		//		EulerAngles modelB = base.eulerAngles();
		modelA.scale(1 / click.rmx.RMX.PI_OVER_180);

		glPushMatrix();

		glTranslatef(
				_modelView.m30,// + m.m30, 
				_modelView.m31,// + m.m31,
				_modelView.m32 // + m.m32
				);

		glRotatef(modelA.x, 1,0,0);
		glRotatef(modelA.y, 0,1,0);
		glRotatef(modelA.z, 0,0,1);

		float 
		X = node.transform().scale().x,
		Y = node.transform().scale().y,
		Z = node.transform().scale().z;
		drawWithScale(X, Y, Z);

		GL11.glPopMatrix();

	}
	
	protected abstract void drawWithScale(float x, float y, float z);

	public void _render() {
		//this.pushMatrx();
		//		GL11.glVertex3dv(_elements);
		//glColor3f(0.0f,0.0f,1.0f);
		//GL11.glDrawElements(GL_QUADS, _elements);
		//this.popMatrix();
	}
	private static OldGeometry _cube;

	public static OldGeometry cube() {
		if (_cube != null){
			return _cube;
		} else {
			_cube = new OldGeometry() {//Mesh.vertices1, Mesh.normals1, Mesh.colors1) {
				@Override
				protected void drawWithScale(float X, float Y, float Z) {
					GL11.glBegin(GL11.GL_QUADS);    
					GL11.glColor3f(1.0f,1.0f,0.0f);   
					glNormal3f(0,1,0);
					GL11.glVertex3f( X, Y,-Z);        
					GL11.glVertex3f(-X, Y,-Z);        
					GL11.glVertex3f(-X, Y, Z);
					GL11.glVertex3f( X, Y, Z);  
					GL11.glColor3f(1.0f,0.5f,0.0f);  
					glNormal3f(0,-1,0);
					GL11.glVertex3f( X,-Y, Z);
					GL11.glVertex3f(-X,-Y, Z);
					GL11.glVertex3f(-X,-Y,-Z);
					GL11.glVertex3f( X,-Y,-Z);
					GL11.glColor3f(1.0f,0.0f,0.0f);
					glNormal3f(0,0,1);
					GL11.glVertex3f( X, Y, Z);
					GL11.glVertex3f(-X, Y, Z);
					GL11.glVertex3f(-X,-Y, Z);
					GL11.glVertex3f( X,-Y, Z);
					GL11.glColor3f(1.0f,1.0f,0.0f);
					glNormal3f(0,0,-1);
					GL11.glVertex3f( X,-Y,-Z);
					GL11.glVertex3f(-X,-Y,-Z);
					GL11.glVertex3f(-X, Y,-Z);
					GL11.glVertex3f( X, Y,-Z);
					GL11.glColor3f(0.0f,0.0f,1.0f);
					glNormal3f(-1,0,0);
					GL11.glVertex3f(-X, Y, Z);
					GL11.glVertex3f(-X, Y,-Z);
					GL11.glVertex3f(-X,-Y,-Z);
					GL11.glVertex3f(-X,-Y, Z);
					GL11.glColor3f(1.0f,0.0f,1.0f);
					glNormal3f(1,0,0);
					GL11.glVertex3f( X, Y,-Z);
					GL11.glVertex3f( X, Y, Z);
					GL11.glVertex3f( X,-Y, Z);
					GL11.glVertex3f( X,-Y,-Z);
					GL11.glEnd();    
				}

			};

		}
		return _cube;
	}

	
	public Shape getShape() {
		return Shapes.Cube;
	}

	public void setShape(Shape shape) {	
		System.err.println("setShape: not implemented in OldGeometry");
	}
	
	
	public Vector4 getColor() {
		return Vector4.Zero;
	}
	
	
	public void setColor(Vector4 color) {
		System.err.println("setColor: not implemented in OldGeometry");
	}
}
