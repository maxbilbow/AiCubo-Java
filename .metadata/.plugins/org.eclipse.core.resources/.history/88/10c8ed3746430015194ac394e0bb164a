package rmx;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

/**
 * 
 *   @author Max Bilbow, 15-08-04 16:08:32
 *
 *   @brief  abstract class for EventListeners
 *   @see NotificationCenter
 *   @since 0.1
 */
public abstract class EventListener {
    
   
       
    /**
     *  @author Max Bilbow, 15-08-04 16:08:30
     *
     *  Notify's all active listeners that an event is about to start
     *  @param theEvent as string
     *  @param args     anything
     *  @since 0.1
     */
	public void onEventDidStart(String theEvent, Object args){
		String arg = args != null ? args.toString() : "N/A";
        System.out.println(this.uniqueName() + " => Event Started: " + theEvent + " ("+ NotificationCenter.getInstance().statusOf(theEvent) +"), with args: " + arg);
    }
    
    /**
     *  @author Max Bilbow, 15-08-04 16:08:53
     *
     *  Notify's all active listeners that an event did start
     *  @param theEvent string identifier
     *  @param args     anything
     *  @since 0.1
     */
    public abstract void onEventDidEnd(String theEvent, Object args); 

    
    /**
     *   @author Max Bilbow, 15-08-04 16:08:55
     *
     *   Receives a message
     *   Has to be overridden for to add specific method handing
     *   as it is currently not automatic to call a method this way
     *   @param message Name of selector or any other message
     *   @param args    any object.
     *   @since 0.1
     */
    public void sendMessage(String message, Object args) {
    	Class<?> classType = this.getClass();
		try {
			Method method;
			if (args != null) {
				method = classType.getDeclaredMethod(message, args.getClass());
				method.invoke(this,args);
			} else {
				method = classType.getDeclaredMethod(message);
				method.invoke(this);
			}
		} catch (NoSuchMethodException e) {
//			System.out.println(classType.getName() + " Does not implement " + message + " with args: " + args);
		} catch (IllegalAccessException e) {
			System.out.println(classType.getName() + " IllegalAccessException " + message + " with args: " + args);
		} catch (IllegalArgumentException e) {
			System.out.println(classType.getName() + " IllegalArgumentException " + message + " with args: " + args);
		} catch (InvocationTargetException e) {
			System.out.println(classType.getName() + " InvocationTargetException " + message + " with args: " + args);
		}
    }
    
    /**
     *   @author Max Bilbow, 15-08-04 16:08:55
     *
     *   Receives a message
     *   Has to be overridden for to add specific method handing
     *   as it is currently not automatic to call a method this way
     *   @param message Name of selector or any other message
     *   @param args    any object.
     *   @since 0.1
     */
    public void sendMessage(String message){
		Class<?> classType = this.getClass();
		try {
			Method method = classType.getDeclaredMethod(message);
			method.invoke(this);
		} catch (NoSuchMethodException e) {
			System.out.println(classType.getName() + " Does not implement " + message);
		} catch (IllegalAccessException e) {
			System.out.println(classType.getName() + " IllegalAccessException " + message);
		} catch (IllegalArgumentException e) {
			System.out.println(classType.getName() + " IllegalArgumentException " + message );
		} catch (InvocationTargetException e) {
			System.out.println(classType.getName() + " InvocationTargetException " + message );
		}
	}
    
   

    /**
     *   @author Max Bilbow, 15-08-04 16:08:22
     *
     *   @brief  Inserts the object into Notification::listeners, if it isn't already inserted.
     *
     *   @see NotificationCenter::addListener(listener)
     *   @since 0.1
     */
    public void startListening(){
    	NotificationCenter.getInstance().addListener(this);
    }
    
    /**
     *   @author Max Bilbow, 15-08-04 16:08:22
     *
     *   @brief  Removes the object from Notification::listeners, if it exists in the list.
     *   @see NotificationCenter::removeListener(listener)
     *   @since <#0.1#>
     */
    public void stopListening() {
    	NotificationCenter.getInstance().removeListener(this);
	}

    
    ///Extends the Object::clone() method so that the listening status of the object is also copied.
    ///@see NotificationCenter::addListener(listener);
    public abstract EventListener clone();

};