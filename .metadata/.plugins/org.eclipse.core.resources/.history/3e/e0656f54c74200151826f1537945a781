package rmx.gl;
import static org.lwjgl.glfw.GLFW.GLFW_KEY_ESCAPE;
import static org.lwjgl.glfw.GLFW.GLFW_RELEASE;
import static org.lwjgl.glfw.GLFW.glfwSetWindowShouldClose;
import static org.lwjgl.opengl.GL11.GL_TRUE;
import java.util.HashMap;
import org.lwjgl.glfw.GLFWKeyCallback;

public class KeyCallback extends GLFWKeyCallback implements IKeyProcessor {
	public static char forward = 'w', back = 's', left = 'a', right = 'd', up = 'e', down = 'q', stop = 'c', jump = ' ';
	public static boolean update = true;
    public HashMap<Integer,Boolean> keyStates = new HashMap<Integer,Boolean>();//, keySpecialStates[] = new boolean[246];
	
	 @Override
     public void invoke(long window, int key, int scancode, int action, int mods) {
         if ( key == GLFW_KEY_ESCAPE && action == GLFW_RELEASE )
             glfwSetWindowShouldClose(window, GL_TRUE); 
         else if (action == 1 && !this.keyStates.getOrDefault(key, false)) {
        	 this.keyPressed(key,scancode, mod);
         } else if (this.keyStates.getOrDefault(key, false)) {
        	 this.keyUpOperations(key);
         } else {
        	 System.out.println("Other... " + key + " "+ scancode + " "+ action + " "+ mods);
         }
     }

	@Override
	public void repeatedKeys() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void movement(float speed, int key) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyDownOperations(int key) {
		
	}

	@Override
	public void keyUpOperations(int key) {
		
	}

	@Override
	public void keyPressed(char key, int scancode, int mod) {
		this.keyStates.put((int) key, true);
		System.out.println("Key Down: " + key);
	}

	@Override
	public void keyUp(char key, int x, int y) {
		this.keyStates.put((int) key, false);
		System.out.println("  Key Up: " + key);
	}
}
